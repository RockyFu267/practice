package medium

// 给你一个非负整数数组 nums ，你最初位于数组的 第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。

// 判断你是否能够到达最后一个下标，如果可以，返回 true ；否则，返回 false 。

// 示例 1：

// 输入：nums = [2,3,1,1,4]
// 输出：true
// 解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
// 示例 2：

// 输入：nums = [3,2,1,0,4]
// 输出：false
// 解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。

// 提示：

// 1 <= nums.length <= 104
// 0 <= nums[i] <= 105

// canJump 跳跃游戏
func canJump(nums []int) bool {
	n := len(nums)
	if n <= 1 {
		return true
	}

	// 定义从最后一个位置开始的目标位置
	target := n - 1

	// 从倒数第二个位置向前遍历
	for i := n - 2; i >= 0; i-- {
		// 如果当前位置可以跳到或超过目标位置，更新目标位置为当前位置
		if nums[i] >= target-i {
			target = i
		}
	}

	// 如果最终目标位置为0，说明可以从开始位置跳到最后一个位置
	return target == 0
}
