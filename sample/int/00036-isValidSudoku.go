package int

// 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

// 上图是一个部分填充的有效的数独。

// 数独部分空格内已填入了数字，空白格用 '.' 表示。

// 示例 1:

// 输入:
// [
//   ["5","3",".",".","7",".",".",".","."],
//   ["6",".",".","1","9","5",".",".","."],
//   [".","9","8",".",".",".",".","6","."],
//   ["8",".",".",".","6",".",".",".","3"],
//   ["4",".",".","8",".","3",".",".","1"],
//   ["7",".",".",".","2",".",".",".","6"],
//   [".","6",".",".",".",".","2","8","."],
//   [".",".",".","4","1","9",".",".","5"],
//   [".",".",".",".","8",".",".","7","9"]
// ]
// 输出: true
// 示例 2:

// 输入:
// [
//   ["8","3",".",".","7",".",".",".","."],
//   ["6",".",".","1","9","5",".",".","."],
//   [".","9","8",".",".",".",".","6","."],
//   ["8",".",".",".","6",".",".",".","3"],
//   ["4",".",".","8",".","3",".",".","1"],
//   ["7",".",".",".","2",".",".",".","6"],
//   [".","6",".",".",".",".","2","8","."],
//   [".",".",".","4","1","9",".",".","5"],
//   [".",".",".",".","8",".",".","7","9"]
// ]
// 输出: false
// 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
//      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

func isValidSudoku(board [][]byte) bool {
	//row
	for i := 0; i < 9; i++ {
		tmpRow := map[byte]bool{}
		for j := 0; j < 9; j++ {
			// fmt.Println(i, j)
			if _, ok := tmpRow[board[i][j]]; ok && string(board[i][j]) != "." {
				return false
			}
			tmpRow[board[i][j]] = true
		}
	}
	//column
	for i := 0; i < 9; i++ {
		tmpRow := map[byte]bool{}
		for j := 0; j < 9; j++ {
			// fmt.Println(i, j)
			if _, ok := tmpRow[board[j][i]]; ok && string(board[j][i]) != "." {
				return false
			}
			tmpRow[board[j][i]] = true
		}
	}
	//matrix
	for i := 1; i < 4; i++ {
		for j := 1; j < 4; j++ {

		}
	}
	return true
}
