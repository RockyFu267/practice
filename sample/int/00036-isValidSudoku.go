package int

// 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

// 上图是一个部分填充的有效的数独。

// 数独部分空格内已填入了数字，空白格用 '.' 表示。

// 示例 1:

// 输入:
// [
//   ["5","3",".",".","7",".",".",".","."],
//   ["6",".",".","1","9","5",".",".","."],
//   [".","9","8",".",".",".",".","6","."],
//   ["8",".",".",".","6",".",".",".","3"],
//   ["4",".",".","8",".","3",".",".","1"],
//   ["7",".",".",".","2",".",".",".","6"],
//   [".","6",".",".",".",".","2","8","."],
//   [".",".",".","4","1","9",".",".","5"],
//   [".",".",".",".","8",".",".","7","9"]
// ]
// 输出: true
// 示例 2:

// 输入:
// [
//   ["8","3",".",".","7",".",".",".","."],
//   ["6",".",".","1","9","5",".",".","."],
//   [".","9","8",".",".",".",".","6","."],
//   ["8",".",".",".","6",".",".",".","3"],
//   ["4",".",".","8",".","3",".",".","1"],
//   ["7",".",".",".","2",".",".",".","6"],
//   [".","6",".",".",".",".","2","8","."],
//   [".",".",".","4","1","9",".",".","5"],
//   [".",".",".",".","8",".",".","7","9"]
// ]
// 输出: false
// 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
//      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

func isValidSudoku(board [][]byte) bool {

	var rows, columns [9][9]int
	var subboxes [3][3][9]int
	for i, row := range board {
		for j, c := range row {
			if c == '.' {
				continue
			}
			index := c - '1'
			rows[i][index]++
			columns[j][index]++
			subboxes[i/3][j/3][index]++
			if rows[i][index] > 1 || columns[j][index] > 1 || subboxes[i/3][j/3][index] > 1 {
				return false
			}
		}
	}
	return true

	// //行
	// for i := 0; i < 9; i++ {
	// 	tmpR := make(map[byte]bool)
	// 	for j := 0; j < 9; j++ {
	// 		if string(board[i][j]) == "." {
	// 			continue
	// 		}
	// 		if tmpR[board[i][j]] {
	// 			return false
	// 		}
	// 		tmpR[board[i][j]] = true
	// 	}
	// }

	// //列
	// for i := 0; i < 9; i++ {
	// 	tmpC := make(map[byte]bool)
	// 	for j := 0; j < 9; j++ {
	// 		if string(board[j][i]) == "." {
	// 			continue
	// 		}
	// 		if tmpC[board[j][i]] {
	// 			return false
	// 		}
	// 		tmpC[board[j][i]] = true
	// 	}
	// }

	// //块
	// for i := 0; i < 9; i++ {
	// 	for j := 0; j < 9; j++ {

	// 	}
	// }

	// return true
}
